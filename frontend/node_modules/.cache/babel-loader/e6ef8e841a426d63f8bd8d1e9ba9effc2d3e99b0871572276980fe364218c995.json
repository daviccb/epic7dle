{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Desktop\\\\epic7dle\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Wordle from './components/Wordle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [solution, setSolution] = useState(null);\n  useEffect(() => {\n    fetch('/db.json').then(res => res.json()).then(json => {\n      // random int between 0 & 14\n      console.log(json.solutions);\n      const randomSolution = json.solutions[Math.floor(Math.random() * json.length)];\n      setSolution(randomSolution.word);\n    });\n  }, [setSolution]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle (Lingo)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), solution && /*#__PURE__*/_jsxDEV(Wordle, {\n      solution: solution\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TWlLMDOrQRrjrZYBibtoISDiqTs=\");\n_c = App;\nexport default App;\n\n/* \n\ndata we need to track:\n  -- solution\n    -- 5 letter string, e.g. 'drain'\n  -- past guesses\n    -- an array of past guesses\n    -- each past guess is an array of letter objects [{}, {}, {}, {}, {}]\n    -- each object represents a letter in the guess word {letter: 'a', color: 'yellow'}\n  -- current guess\n    -- string 'hello'\n  -- keypad letters\n    -- array of letter objects [{key: 'a', color: 'green'}, {}, {} ...]\n  -- number of turns\n    -- an integer 0 - 6\n\ngame process:\n  -- entering words:\n    -- user enters a letter & a square is filled with that letter\n    -- when a user hits delete it deletes the previous letter\n    -- when a user hits enter it submits the word\n      -- if all squares are not filled with letters then the word is not submitted\n      -- if that word has already been used in a prev guess then the word is not submitted\n  -- checking submitted words:\n    -- each letter is checked to see if it matches to the solution\n    -- each letter is assigned a color based on it's inclusion in the solution\n      -- exact matches (correct position in the solution) are green\n      -- partial matches (in the solution but not the correct position) are yellow\n      -- none-matches (not in the solution at all) are grey\n    -- the guess is added the grid with the correct colors\n    -- the current guess moves to the next row\n    -- the keypad letters are updated (colors)\n  -- ending the game:\n    -- when the guessed word fully matches the solution\n      -- modal to say 'well done'\n    -- when the user runs out of guesses\n      -- modal to say 'unlucky'\n\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Wordle","jsxDEV","_jsxDEV","App","_s","solution","setSolution","fetch","then","res","json","console","log","solutions","randomSolution","Math","floor","random","length","word","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/David/Desktop/epic7dle/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport Wordle from './components/Wordle'\n\nfunction App() {\n  const [solution, setSolution] = useState(null)\n  \n  useEffect(() => {\n    fetch('/db.json')\n      .then(res => res.json())\n      .then(json => {\n        // random int between 0 & 14\n        console.log(json.solutions);\n        const randomSolution = json.solutions[Math.floor(Math.random()*json.length)]\n        setSolution(randomSolution.word)\n      })\n  }, [setSolution])\n\n  return (\n    <div className=\"App\">\n      <h1>Wordle (Lingo)</h1>\n      {solution && <Wordle solution={solution} />}\n    </div>\n  )\n}\n\nexport default App\n\n/* \n\ndata we need to track:\n  -- solution\n    -- 5 letter string, e.g. 'drain'\n  -- past guesses\n    -- an array of past guesses\n    -- each past guess is an array of letter objects [{}, {}, {}, {}, {}]\n    -- each object represents a letter in the guess word {letter: 'a', color: 'yellow'}\n  -- current guess\n    -- string 'hello'\n  -- keypad letters\n    -- array of letter objects [{key: 'a', color: 'green'}, {}, {} ...]\n  -- number of turns\n    -- an integer 0 - 6\n\ngame process:\n  -- entering words:\n    -- user enters a letter & a square is filled with that letter\n    -- when a user hits delete it deletes the previous letter\n    -- when a user hits enter it submits the word\n      -- if all squares are not filled with letters then the word is not submitted\n      -- if that word has already been used in a prev guess then the word is not submitted\n  -- checking submitted words:\n    -- each letter is checked to see if it matches to the solution\n    -- each letter is assigned a color based on it's inclusion in the solution\n      -- exact matches (correct position in the solution) are green\n      -- partial matches (in the solution but not the correct position) are yellow\n      -- none-matches (not in the solution at all) are grey\n    -- the guess is added the grid with the correct colors\n    -- the current guess moves to the next row\n    -- the keypad letters are updated (colors)\n  -- ending the game:\n    -- when the guessed word fully matches the solution\n      -- modal to say 'well done'\n    -- when the user runs out of guesses\n      -- modal to say 'unlucky'\n\n*/"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,UAAU,CAAC,CACdC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACE,IAAI,IAAI;MACZ;MACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,SAAS,CAAC;MAC3B,MAAMC,cAAc,GAAGJ,IAAI,CAACG,SAAS,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAACP,IAAI,CAACQ,MAAM,CAAC,CAAC;MAC5EZ,WAAW,CAACQ,cAAc,CAACK,IAAI,CAAC;IAClC,CAAC,CAAC;EACN,CAAC,EAAE,CAACb,WAAW,CAAC,CAAC;EAEjB,oBACEJ,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBnB,OAAA;MAAAmB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBpB,QAAQ,iBAAIH,OAAA,CAACF,MAAM;MAACK,QAAQ,EAAEA;IAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV;AAACrB,EAAA,CApBQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAsBZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}