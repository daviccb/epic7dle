{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./MainGame.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CORRECT_ANSWER=\"Kirara\";// You can dynamically set this based on your application needs\nfunction MainGame(){const[input,setInput]=useState('');const[guesses,setGuesses]=useState([]);const[feedback,setFeedback]=useState('');// In one of your React components\nuseEffect(()=>{fetch('http://localhost:3001/api/greet').then(response=>response.json()).then(data=>console.log(data));},[]);const handleInputChange=e=>{setInput(e.target.value);};const handleGuessSubmit=()=>{if(input.trim()!==''){const isCorrect=input.trim().toLowerCase()===CORRECT_ANSWER.toLowerCase();const newGuess={guess:input,correct:isCorrect};setGuesses([newGuess,...guesses]);// Prepend new guess to the array\nsetInput('');// Clear input after adding guess\n// Set feedback message\nif(isCorrect){setFeedback('Correct! Well done.');}else{setFeedback('Incorrect, try again!');}}};async function submitGuess(guess){const response=await fetch('/guess',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({guess})});const{correct}=await response.json();if(correct){alert(\"Correct guess!\");}else{alert(\"Wrong guess. Try again!\");}}async function fetchCharacters(){const response=await fetch('/characters');const characters=await response.json();console.log(characters);}async function fetchCharacterDetails(characterId){const response=await fetch(\"/characters/\".concat(characterId));const details=await response.json();console.log(details);}return/*#__PURE__*/_jsxs(\"div\",{className:\"main-game\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"character-display\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter character name...\",value:input,onChange:handleInputChange}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchCharacters,children:\"Guess\"})]}),/*#__PURE__*/_jsx(\"p\",{children:feedback}),\" \",/*#__PURE__*/_jsx(\"div\",{className:\"guess-table\",children:/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Guess Number\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Guess\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Status\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:guesses.map((item,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:item.guess}),/*#__PURE__*/_jsx(\"td\",{className:item.correct?'correct':'incorrect',children:item.correct?'Correct':'Incorrect'})]},index))})]})})]});}export default MainGame;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","CORRECT_ANSWER","MainGame","input","setInput","guesses","setGuesses","feedback","setFeedback","fetch","then","response","json","data","console","log","handleInputChange","e","target","value","handleGuessSubmit","trim","isCorrect","toLowerCase","newGuess","guess","correct","submitGuess","method","headers","body","JSON","stringify","alert","fetchCharacters","characters","fetchCharacterDetails","characterId","concat","details","className","children","type","placeholder","onChange","onClick","map","item","index"],"sources":["C:/Users/David/Desktop/epic7dle/frontend/src/components/MainGameDir/MainGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MainGame.css';\r\n\r\nconst CORRECT_ANSWER = \"Kirara\"; // You can dynamically set this based on your application needs\r\n\r\n\r\n\r\nfunction MainGame() {\r\n  const [input, setInput] = useState('');\r\n  const [guesses, setGuesses] = useState([]);\r\n  const [feedback, setFeedback] = useState('');\r\n  \r\n  // In one of your React components\r\n  useEffect(() => {\r\n    fetch('http://localhost:3001/api/greet')\r\n        .then(response => response.json())\r\n        .then(data => console.log(data));\r\n  }, []);\r\n\r\n    const handleInputChange = (e) => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleGuessSubmit = () => {\r\n      if (input.trim() !== '') {\r\n          const isCorrect = input.trim().toLowerCase() === CORRECT_ANSWER.toLowerCase();\r\n          const newGuess = {\r\n              guess: input,\r\n              correct: isCorrect\r\n          };\r\n          setGuesses([newGuess, ...guesses]); // Prepend new guess to the array\r\n          setInput(''); // Clear input after adding guess\r\n  \r\n          // Set feedback message\r\n          if (isCorrect) {\r\n              setFeedback('Correct! Well done.');\r\n          } else {\r\n              setFeedback('Incorrect, try again!');\r\n          }\r\n      }\r\n    };\r\n\r\n  async function submitGuess(guess) {\r\n    const response = await fetch('/guess', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ guess })\r\n    });\r\n    const { correct } = await response.json();\r\n    if (correct) {\r\n      alert(\"Correct guess!\");\r\n    } else {\r\n      alert(\"Wrong guess. Try again!\");\r\n    }\r\n  }\r\n  \r\n\r\n  async function fetchCharacters() {\r\n    const response = await fetch('/characters');\r\n    const characters = await response.json();\r\n    console.log(characters);\r\n  }\r\n  \r\n  async function fetchCharacterDetails(characterId) {\r\n    const response = await fetch(`/characters/${characterId}`);\r\n    const details = await response.json();\r\n    console.log(details);\r\n  }\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"main-game\">\r\n        <div className=\"character-display\">\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter character name...\"\r\n                value={input}\r\n                onChange={handleInputChange}\r\n            />\r\n            <button onClick={fetchCharacters}>Guess</button>\r\n        </div>\r\n        <p>{feedback}</p> {/* Display feedback message */}\r\n        <div className=\"guess-table\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Guess Number</th>\r\n                        <th>Guess</th>\r\n                        <th>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {guesses.map((item, index) => (\r\n                        <tr key={index}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{item.guess}</td>\r\n                            <td className={item.correct ? 'correct' : 'incorrect'}>\r\n                                {item.correct ? 'Correct' : 'Incorrect'}\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default MainGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}